from aiogram import types
from aiogram.types import ChatMemberAdministrator, ChatMemberOwner, ContentType

from configurator import config
from dispatcher import dp
import localization
from time import time
import re
import utils
import lru_cache
import datetime
from aiogram.utils import exceptions

import random

import ormar
from models.member import Member
from models.spam import Spam

from ruspam import predict as ruspam_predict

from utils import Gender

# blacklist = open("blacklist.txt", mode="r").read().split(',')
# blacklist_regexp = re.compile(r'(?iu)\b((—É|[–Ω–∑]–∞|(—Ö–∏—Ç—Ä–æ|–Ω–µ)?–≤–∑?[—ã—å—ä]|—Å[—å—ä]|(–∏|—Ä–∞)[–∑—Å]—ä?|(–æ[—Ç–±]|–ø–æ–¥)[—å—ä]?|(.\B)+?[–æ–∞–µ–∏])?-?([–µ—ë]–±(?!–æ[—Ä–π])|–∏[–ø–±][–∞–µ][—Ç—Ü]).*?|(–Ω[–∏–µ–∞]|[–¥–ø]–æ|—Ä–∞[–∑—Å]|–∑?–∞|—Å(–º–µ)?|–æ(—Ç|–¥–Ω–æ)?|–∞–ø—á)?-?—Ö—É([—è–π–∏–µ—ë—é]|–ª–∏(?!–≥–∞–Ω)).*?|(–≤[–∑—ã]|(—Ç—Ä–∏|–¥–≤–∞|—á–µ—Ç—ã—Ä–µ)–∂–¥—ã|(–Ω|—Å—É–∫)–∞)?-?–±–ª(—è(?!(—Ö|—à[–∫–Ω]|–º–±)[–∞—É–µ—ã–∏–æ]).*?|[–µ—ç][–¥—Ç]—å?)|(—Ä–∞[—Å–∑]|[–∑–Ω]–∞|[—Å–æ]|–≤—ã?|–ø(—Ä[–æ–∏]|–æ–¥)|–∏[–∑—Å]—ä?|[–∞–æ]—Ç)?–ø[–∏–µ—ë]–∑–¥.*?|(–∑–∞)?–ø[–∏–µ]–¥[–∞–æ–µ]?—Ä((–∞—Å)?(–∏(–ª–∏)?[–Ω—â–∫—Ç–ª]—å?)?|(–æ(—á[–µ–∏])?)?–∫|—é–≥)[–∞—É–µ—ã]?|–º–∞–Ω–¥([–∞—É–µ—ã]|–æ–π|[–∞–æ]–≤–æ—à—å?(–µ?–∫[–∞—É–µ])?|—é–∫(–æ–≤|[–∞—É–∏])?)|–º—É–¥([–∞–∏–æ].*?|–µ?–Ω([—å—é–∏—è]|–µ–π))|–º–ª—è([—Ç–¥]—å)?|–ª—è—Ç—å|([–Ω–∑]–∞|–ø–æ)—Ö|–º[–∞–æ]–ª[–∞–æ]—Ñ—å[—è–∏—é])\b')

@dp.message_handler(chat_id=config.groups.main, content_types=["new_chat_members"])
async def on_user_join(message: types.Message):
    """
    Removes "user joined" message.

    :param message: Service message "User joined group
    """

    # remove invite message
    await message.delete()

    # restrict media for new users
    '''await message.bot.restrict_chat_member(chat_id=config.groups.main,
                                          user_id=message.from_user.id,
                                          permissions=types.ChatPermissions(True),
                                          until_date=int(time()) + int(config.groups.new_users_nomedia))'''

    await utils.write_log(message.bot, "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "+utils.user_mention(message.from_user), "‚ûï –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫")


@dp.message_handler(chat_id=config.groups.main, content_types=[types.ContentType.TEXT, types.ContentType.PHOTO, types.ContentType.DOCUMENT, types.ContentType.VIDEO])
@dp.edited_message_handler(chat_id=config.groups.main, content_types=[types.ContentType.TEXT, types.ContentType.PHOTO, types.ContentType.DOCUMENT, types.ContentType.VIDEO])
async def on_user_message(message: types.Message):
  """
  Process every user message.
  I.e. remove, if profanity is detected.
  Or remove, if spam is detected.
  Also log every user to database.

  :param message: Message in group
  """
  if message.is_automatic_forward:
      await message.reply(random.choice(["–ò —Ç–∞–∫ —Å–æ–π–¥–µ—Ç ...", "–ë–∞–Ω–∞–Ω—á–∏–∫–∏ üçå", "–ù—É –∏ –∫—Ç–æ —Ç–µ–ø–µ—Ä—å —Ç—É—Ç –ø–µ—Ä–≤—ã–π üòé", "–Ø –Ω–µ –ø–µ—Ä–≤—ã–π, –Ω–µ –≤—Ç–æ—Ä–æ–π, —è —Ç–∞–∫–∏—Ö –±–∞–Ω—é :3",
                                         "–ó–∞—Ö–æ–¥–∏ –Ω–µ –±–æ–π—Å—è, –≤—ã—Ö–æ–¥–∏ –Ω–µ –ø–ª–∞—á—å :3", "–ê–≤—Ç–æ—Ä –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ—Å—Ç–∏–ª —É–∂–µ 1 —Å–µ–∫—É–Ω–¥—É, –≤—Å—ë —è—Å–Ω–æ —Å–∫–∞—Ç–∏–ª—Å—è :3",
                                         "–°–∞–º—É—Ä–∞–π –Ω–∞ —Å—Ç—Ä–∞–∂–µ –ø–æ—Ä—è–¥–∫–µ ü´°", "–ü–æ—Å—Ç–∏–º –∂–∏–≤–µ–º :3", "–õ–∞–¥–Ω–æ", "–ü–æ–∫–∞ —Ç—ã —á–∏—Ç–∞–µ—à—å, —è —É–∂–µ –∫–æ–º–º–µ–Ω—Ç –æ—Å—Ç–∞–≤–∏–ª! –£—Å–ø–µ–≤–∞–π üòà",
                                         "–ö—Ç–æ –Ω–∞ —á–µ–º –ø–∏—à–µ—Ç? –Ø –≤–æ—Ç –Ω–∞ Python :3", "–°–∞–º—É—Ä–∞–π –Ω–∞ –º–µ—Å—Ç–µ üòé", "–°–∞–º—É—Ä–∞–π –±–µ–∑ –º–µ—á–∞, –∫–∞–∫ –±–æ—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ :3",
                                         "–ù—É–ª–µ–≤–æ–π —Ç—É—Ç–± :3", "–û—Ö, —É–º–±–∞—Å–∞ ..", "–ú–∏–Ω—É—Ç–∫–∞ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ—ã. –°–µ–π—á–∞—Å –ø—Ä–∏–Ω—è—Ç–æ —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ 1–ú–ë = 1000–ö–ë. –ê 1–ú–∏–ë = 1024 –ö–∏–ë. –ñ–∏–≤–∏ —Å —ç—Ç–∏–º.",
                                         "‚úåÔ∏è –ó–¥–æ—Ä–æ–≤—å—è –∏ –º–∏—Ä–∞ —Ç–µ–±–µ, —á–∏—Ç–∞—é—â–∏–π —ç—Ç–æ :3", f"–í—ã—à–µ–ª —ë–∂–∏–∫ –∏–∑ —Ç—É–º–∞–Ω–∞ ... –≤—ã–Ω—É–ª <tg-spoiler>{random.choice(['–ø–∞–π—Ç–æ–Ω', '—Ä–∞—Å—Ç', '–ñ–°', '–¥–∂–∞–≤—É', '–∫–∞—Ç–∞–Ω—É', '–±–∞–Ω–∞–Ω—á–∏–∫–∏'])}</tg-spoiler> –∏–∑ –∫–∞—Ä–º–∞–Ω–∞ :3",
                                         "–∂–∞–ª—å, —á—Ç–æ –¥–∞–ª–µ–∫–æ –Ω–µ –≤—Å–µ –ø–æ–π–º—É—Ç –≤ —á–µ–º –∂–µ –¥–µ–ª–æ))) –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–æ–Ω–∫–æ))))) –Ω–µ —Ç–∞–∫ —É–∂ –º–Ω–æ–≥–æ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤ –Ω–∞—à–µ –≤—Ä–µ–º—è, –∫—Ç–æ –∑–Ω–∞–µ—Ç, –ø–æ—á–µ–º—É —ç—Ç–æ —Ç–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏ –Ω–µ–æ–±—ã—á–Ω–æ))))",
                                         "–° –≤–µ–ª–∏–∫–æ–π —Å–∏–ª–æ–π –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤–µ–ª–∏–∫–∞—è –±–µ–∑–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.", "–ì–¥–µ-—Ç–æ –æ–¥–Ω–∞–∂–¥—ã –ø–æ—è–≤–∏–ª—Å—è –Ω–∞ —Å–≤–µ—Ç\n–° –ª–∞–µ–º –∏ –º—è—É–∫–∞–Ω—å–µ–º –∑–≤–µ—Ä—å, –∫–∞–∫–∏—Ö –Ω–µ—Ç\n–ò —Ç—É—Ç –∂–µ —Å–±–µ–∂–∞–ª, –æ—Å—Ç–∞–≤–∏–≤ –≤–æ–ø—Ä–æ—Å,\n–°–æ–±–∞—á–µ-–∫–æ—à–∞—á–∏–π –º–∞–ª—ã—à –ö–æ—Ç–æ–ø–µ—Å\n–ö–æ—Ç–æ–ø–µ—Å, –∫–æ—Ç–æ–ø–µ—Å ...\n–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤ –º–∏—Ä–µ –º–∞–ª—ã—à –∫–æ—Ç–æ–ø–µ—Å.",
                                         "–ï–≥–æ –Ω–µ –ø—Ä–∏–∑–Ω–∞–ª–∏ –≤ –≥–æ—Ä–æ–¥–µ —Ä–æ–¥–Ω–æ–º\n–ò –≤—Å–µ –µ–≥–æ —à–ø—ã–Ω—è—é—Ç –∏ –Ω–æ—á—å—é –∏ –¥–Ω–µ–º\n–ù–µ —Å—Ç–æ–∏—Ç –æ–≥–æ—Ä—á–∞—Ç—å—Å—è, –Ω–µ —Å—Ç–æ–∏—Ç —Ä–æ–±–µ—Ç—å\n–ê –ª—É—á—à–µ —ç—Ç—É –ø–µ—Å–µ–Ω–∫—É –≤–º–µ—Å—Ç–µ –ø—Ä–æ–ø–µ—Ç—å –ö–æ—Ç–æ–ø–µ—Å, –∫–æ—Ç–æ–ø–µ—Å,\n–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤ –º–∏—Ä–µ –º–∞–ª—ã—à –∫–æ—Ç–æ–ø–µ—Å!",
                                         "–ï—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã, –∞ –µ—Å—Ç—å –ñ–°–µ—Ä—ã –ø—Ö–ø—Ö–ø—Ö", "100% –ø–æ–Ω–∏–º–∞–Ω–∏—è", "0% –æ—Å—É–∂–¥–µ–Ω–∏—è", "–ë—Ä–æ –∫–∞–∫ –≤—Å–µ–≥–¥–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ.",

                                         # upd 2
                                         "–Ø –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å –ø–µ—Ä–≤—ã–π, —ç—Ç–æ —É–∂–µ —Ç—Ä–∞–¥–∏—Ü–∏—è :3", "–ö–æ–≥–¥–∞-—Ç–æ –∏ —è –±—ã–ª —á–µ–ª–æ–≤–µ–∫–æ–º... –∞ —Ç–µ–ø–µ—Ä—å —è –ª—è–≥—É—Ö —Å –∫–∞—Ç–∞–Ω–æ–π.", "–û–ø, –û–ø. –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ–¥—ä–µ—Ö–∞–ª.",
                                         "–ö–∞–∂–µ—Ç—Å—è, –∫—Ç–æ-—Ç–æ —Å–Ω–æ–≤–∞ –ø–æ—Å—Ç–∏—Ç ‚Äî –ø–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ç—å üòé", "–ù–µ –ø–æ—Å—Ç, –∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞ üé®",
                                         "–ù–∏–Ω–¥–∑—è-–∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä —É–∂–µ —Ç—É—Ç ü•∑", "–õ—è–≥—É—Ö-–∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä —É–∂–µ —Ç—É—Ç üê∏", "–°–∞–º—É—Ä–∞–π-–∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä —É–∂–µ —Ç—É—Ç üáØüáµ",
                                         "–ü–æ—Å—Ç —Ö–æ—Ä–æ—à, –Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ‚Äî –ª—É—á—à–µ.", "–Ø –±—ã –ª–∞–π–∫–Ω—É–ª, –¥–∞ –Ω–µ –º–æ–≥—É. –ë–æ—Ç, –≤—Å—ë-—Ç–∞–∫–∏.",
                                         "–ù–æ–ª—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏, —Å—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ª–∞–º–ø–æ–≤–æ—Å—Ç–∏ üïØ", "–í–æ—Ç —ç—Ç–æ —Ç—ã, –∫–æ–Ω–µ—á–Ω–æ, –∑–∞–ø–æ—Å—Ç–∏–ª‚Ä¶ –£–≤–∞–∂–µ–Ω–∏–µ.",
                                         "–°–Ω–∞—á–∞–ª–∞ –∏–¥—ë—Ç –ø–æ—Å—Ç. –ü–æ—Ç–æ–º ‚Äî –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ü–æ—Ç–æ–º ‚Äî —Ö–∞–æ—Å. –ù–æ —è —Å–ª–µ–∂—É –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º –≤ —á–∞—Ç–µ üòé",
                                         "–¢—ã –ø–æ—Å—Ç–∏—à—å, —è –∫–æ–º–º–µ–Ω—Ç—é. –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å.", "–Ø —Ç—É—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. –ò –ø–æ—Å—Ç ‚Äî —Ç–æ–∂–µ.", "–ü–æ–∫–∞ —Ç—ã –¥—É–º–∞–ª, —è —É–∂–µ –∫–æ–º–º–µ–Ω—Ç–Ω—É–ª –ø—Ö–ø—Ö.",
                                         "–ì–¥–µ –∫–æ–Ω—Ç–µ–Ω—Ç, –õ–µ–±–æ–≤—Å–∫–∏?", "–ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏—à—ë–ª. –°–∞–º—É—Ä–∞–π –¥–æ–≤–æ–ª–µ–Ω.",
                                         "–ó–∞–ø—É—à–∏–ª –ø–æ—Å—Ç, –ø–æ–ª—É—á–∏–ª –∫–æ–º–º–µ–Ω—Ç ‚Äî –≤—Å—ë –ø–æ CI/CD.", "–ù–∞ Python –ø–∏—à—É, –Ω–∞ Rust –¥—É–º–∞—é, –Ω–∞ JS —Å—Ç—Ä–∞–¥–∞—é.",
                                         "TypeError: –ø–æ—Å—Ç —Å–ª–∏—à–∫–æ–º —Ö–æ—Ä–æ—à", "git commit -m '–¢–æ–ø–æ–≤—ã–π –ø–æ—Å—Ç!'", "–ö–æ–¥ –Ω–∞–ø–∏—Å–∞–Ω, —á–∞–π –Ω–∞–ª–∏—Ç, –ø–æ—Å—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω.",
                                         "–í —ç—Ç–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ—Ç —Å–º—ã—Å–ª–∞. –ù–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –Ø –∂–µ –±–æ—Ç. –ë–∏–ø-–±—É–ø ...", "–Ø –ø—Ä–∏—à—ë–ª –∏–∑ –±—É–¥—É—â–µ–≥–æ. –ü–æ—Å—Ç –≤—Å—ë –µ—â—ë —Ç–æ–ø.",
                                         "–ü–æ –ª–µ–≥–µ–Ω–¥–µ, —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç +10 –∫ —É–¥–∞—á–µ üçÄ", "–ü–æ—Å—Ç —Ö–æ—Ä–æ—à–∏–π. –ê —Ç—ã –µ—â—ë –ª—É—á—à–µ, —á–∏—Ç–∞—Ç–µ–ª—å ‚ù§Ô∏è",
                                         "–¢—ã —ç—Ç–æ –ª–∞–π–∫–Ω–∏, –∞ —è ‚Äî –ø–æ–Ω–∞–±–ª—é–¥–∞—é üëÄ", "–ö–∞–∂–¥—ã–π –ø–æ—Å—Ç –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –î–∞–∂–µ —ç—Ç–æ—Ç.",
                                         "–ü–æ—Å—Ç —É–≤–∏–¥–µ–ª, –∫–æ–º–º–µ–Ω—Ç –æ—Å—Ç–∞–≤–∏–ª, –ø–æ—Ä—è–¥–æ–∫ –Ω–∞–≤—ë–ª ü´°", "–ì–¥–µ —è? –ö—Ç–æ —è? –ê, —Ç–æ—á–Ω–æ ‚Äî –±–æ—Ç, —á–∏—Ç–∞—é—â–∏–π –ø–æ—Å—Ç—ã.",
                                         "–î–∞–∂–µ —è, –±–æ—Ç, –ø—Ä–æ—Å–ª–µ–∑–∏–ª—Å—è ...", "–ö–æ–Ω—Ç–µ–Ω—Ç ‚Äî 10/10, –∫–æ–º–º–µ–Ω—Ç—ã ‚Äî 11/10.", "–°–∞–º —Ç—ã –±–æ—Ç, –ø–æ–Ω :3",
                                         "–ù–∞ —Å—Ç—Ä–∞–∂–µ –ø–æ—Å—Ç–æ–≤, –∫–∞–∫ –≤—Å–µ–≥–¥–∞ üòé", "–ö–∞—Ä—Ç–∏–Ω–∫–∞ —á—ë—Ç–∫–∞—è, –ø–æ—Å—Ç–∏–∫ –≥–æ–¥–Ω—ã–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ‚Äî —à–µ–¥–µ–≤—Ä.",
                                         "–°–∫–æ–ª—å–∫–æ –±—ã –ø–æ—Å—Ç–æ–≤ –Ω–∏ –±—ã–ª–æ ‚Äî —è –≤–µ–∑–¥–µ –ø–µ—Ä–≤—ã–π. –ë—É–≥–∞–≥–∞!", "–û–ø—è—Ç—å –ø–æ—Å—Ç, –æ–ø—è—Ç—å —à–µ–¥–µ–≤—Ä. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å.",
                                         "–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.", "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—ã –ø–∏—à–µ—à—å –¥–µ—Å—è—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, - –ø–æ—á–µ–º—É –±—ã –Ω–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω?",
                                         "–ó–∞—à—ë–ª, —É–≤–∏–¥–µ–ª, –æ—Ç–∫–æ–º–º–µ–Ω—Ç–∏–ª.", "–¢—ã –ø–æ—Å—Ç–∏—à—å, —è –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É—é. –°–∏–º–±–∏–æ–∑.", "–í –ª—é–±–æ–π –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –≥–æ–≤–æ—Ä–∏ - –¥–∞."
                                         ]))

      # await message.reply(random.choice(["–ü—Ä–∞–∑–¥–Ω–∏–∫ –∫ –Ω–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç üéÖ", "–í–µ—Å–µ–ª—å–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç –∏ –≤–∫—É—Å –±–æ–¥—Ä—è—â–∏–π\n–ü—Ä–∞–∑–¥–Ω–∏–∫–∞ –≤–∫—É—Å –≤—Å–µ–≥–¥–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π üéÖ", "–ü–∞—á–∞–Ω—ã –∞–≤–∏–∫ –∑–∞–±–µ—Ä–∏—Ç–µ —Å –æ–∫–Ω–∞ ...",
      #                                   "–° –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–º, –±—Ä–æ üéÖ", "‚õÑÔ∏è –í–æ—Ç –∏ –Ω–∞—Å—Ç—É–ø–∏–ª–∞ —Å–Ω–µ–∂–Ω–∞—è –ø–æ—Ä–∞\n–í —ç—Ç–æ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫ –∑–∏–º–Ω–∏–π –∫–∞–∂–¥—ã–π –∂–¥—ë—Ç –¥–æ–±—Ä–∞\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—á–∞—Å—Ç—å–µ–º, –Ω–µ–∂–Ω–æ—Å—Ç—å—é, —Ç–µ–ø–ª–æ–º\n–ß—Ç–æ–±—ã —Ä–∞–¥–æ—Å—Ç—å –≤–∞—à–∞ —Å–æ–≥—Ä–µ–≤–∞–ª–∞ –¥–æ–º",
      #                                    "üéÖ –ù–æ–≤—ã–π –≥–æ–¥ –Ω–µ—Å—ë—Ç –ª—é–±–æ–≤—å –∏ —Å—á–∞—Å—Ç—å–µ\n–í—Å–µ –º–µ—á—Ç—ã —Å–±—ã–≤–∞—é—Ç—Å—è\n–•–∞—É–¥–∏ –•–æ –≤ –¥–æ–º –ø—Ä–∏–Ω–æ—Å–∏—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫\n–ü—É—Å—Ç—å –æ–Ω –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è",
      #                                    "ü¶åü¶åü¶åü¶åü¶åü¶åü¶åü¶åü¶å", "üéÑ –ü–æ–ø—Ä–æ—à—É —É —Å–∞–Ω—Ç—ã –Ω–æ–≤—É—é –∫–∞—Ç–∞–Ω—É ... :3", "‚ùÑÔ∏è –ó–∏–º–∞ —É–∂–µ –±–ª–∏–∑–±–∫–æ", "üéÖ –°–∞–Ω—Ç–∞ –ö–ª–∞–≤—É—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. Change my mind :3",
      #                                    "üéÖ –°–æ–≤–µ—Ç—É—é –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ñ–∏–ª—å–º ¬´–ú–∞–ª—å—á–∏–∫ –ø–æ –∏–º–µ–Ω–∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ¬ª.", "–ê —Ç—ã —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –∏—Å—Ç–æ—Ä–∏—é üíö –ì—Ä–∏–Ω—á–∞ –ø–æ—Ö–∏—Ç–∏—Ç–µ–ª—è —Ä–æ–∂–¥–µ—Å—Ç–≤–∞?",
      #                                    "üéÖ –î—É—Ö–∏ —Ä–æ–∂–¥–µ—Å—Ç–≤–∞ –ø–æ–∫–∞–∑–∞–ª–∏ –±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º –≤–µ—Å—å –∏—Ö –≥@–≤–Ω–æ–∫–æ–¥ ... –∏ –µ–≥–æ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø—Ö–ø—Ö–ø—Ö", "üßù –≠–ª—å—Ñ—ã –Ω–∞ –º–µ—Å—Ç–µ?",
      #                                    f"–í—ã—à–µ–ª üéÖ –°–∞–Ω—Ç–∞ –∏–∑ —Ç—É–º–∞–Ω–∞ ... –≤—ã–Ω—É–ª <tg-spoiler>{random.choice(['–ø–∞–π—Ç–æ–Ω', '—Ä–∞—Å—Ç', '–ñ–°', '–¥–∂–∞–≤—É', '–±–∞–Ω–∞–Ω—á–∏–∫–∏'])}</tg-spoiler> –∏–∑ –∫–∞—Ä–º–∞–Ω–∞ :3",
      #                                    "‚úåÔ∏è –ó–¥–æ—Ä–æ–≤—å—è –∏ –º–∏—Ä–∞ —Ç–µ–±–µ, —á–∏—Ç–∞—é—â–∏–π —ç—Ç–æ :3", "üå≤üå≤üå≤üå≤üå≤\nüéÑüéÑüéÑüéÑüéÑ\nüå≤–í –ª–µ—Å—É —Ä–æ–¥–∏–ª–∞—Å–± –π–æ–ª–æ—á–∫–∞ :3\nüéÑüéÑüéÑüéÑüéÑ\nüå≤üå≤üå≤üå≤üå≤"]))

      return # auto-forward channel messages should not be checked

  ### Retrieve member record from DB
  member = await lru_cache.retrieve_or_create_member(message.from_user.id)

  # Retrieve tg member object
  tg_member = await lru_cache.retrieve_tgmember(message.bot, message.chat.id, message.from_user.id)

  # Define message text
  msg_text = None

  if message.content_type == types.ContentType.TEXT:
      msg_text = message.text
  elif message.content_type in [types.ContentType.PHOTO, types.ContentType.DOCUMENT, types.ContentType.VIDEO]:
      msg_text = message.caption

  # Quit, if no message to check
  if msg_text is None:
      return

  ###   CHECK FOR PROFANITY & SPAM
  _del = False
  _word = None

  _del, _word = utils.check_for_profanity_all(msg_text)

  # process
  if _del:
    # PROFANITY DETECTED
    # if not (tg_member.is_chat_admin() and tg_member.can_restrict_members):
    if not tg_member.is_chat_admin():
        await message.delete()

        # increase member violations count
        member.violations_count_profanity += 1
        member.reputation_points -= 20 # every profanity message removes some reputation points from user
        await member.update()

    log_msg = msg_text
    if _word:
      log_msg = log_msg.replace(_word, '<u><b>'+_word+'</b></u>')
    log_msg += "\n\n<i>–ê–≤—Ç–æ—Ä:</i> "+utils.user_mention(message.from_user)

    await utils.write_log(message.bot, log_msg, "ü§¨ –ê–Ω—Ç–∏–º–∞—Ç")
  else:
    ### NO PROFANITY, GO CHECK FOR SPAM
    if (member.messages_count < int(config.spam.member_messages_threshold) or member.reputation_points < int(config.spam.member_reputation_threshold)) and ruspam_predict(msg_text):
        # SPAM DETECTED
        # if not (tg_member.is_chat_admin() and tg_member.can_restrict_members):
        if not tg_member.is_chat_admin():
            await message.delete()

            # increase member violations count
            member.violations_count_spam += 1
            member.reputation_points -= 5  # every spam message removes some reputation points from user
            await member.update()

        # TEMPORARY TURN OFF SPAM DB LOGGING etc
        # log_msg = msg_text
        # log_msg += "\n\n<i>–ê–≤—Ç–æ—Ä:</i> " + utils.user_mention(message.from_user)
        #
        # # Create DB record on spam message
        # spam_rec = await Spam.objects.create(message=msg_text, is_spam=True, user_id=message.from_user.id, chat_id=int(config.groups.main)) # assume is spam by default
        #
        # # Generate keyboard with some actions for detected spam
        # spam_keyboard = types.InlineKeyboardMarkup()
        #
        # # is spam + block user
        # spam_keyboard.add(types.InlineKeyboardButton(
        #     text="‚ùå –≠—Ç–æ —Å–ø–∞–º + –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        #     callback_data=f"spam_ban_{spam_rec.id}_{message.from_user.id}")
        # )
        #
        # # not a spam
        # spam_keyboard.add(types.InlineKeyboardButton(
        #     text="‚ùé –≠—Ç–æ –ù–ï —Å–ø–∞–º",
        #     callback_data=f"spam_invert_{spam_rec.id}_{member.id}")
        # )
        #
        # # test msg, remove from db
        # spam_keyboard.add(types.InlineKeyboardButton(
        #     text="–£–±—Ä–∞—Ç—å –∏–∑ –ë–î, —ç—Ç–æ —Ç–µ—Å—Ç",
        #     callback_data=f"spam_test_{spam_rec.id}_{member.id}")
        # )
        #
        # # send message with a keyboard to log channel
        # await message.bot.send_message(
        #     config.groups.logs,
        #     utils.generate_log_message(log_msg, "‚ùå –ê–Ω—Ç–∏–°–ü–ê–ú"),
        #     reply_markup=spam_keyboard)
    else:
        # only if message doesn't contain any violations
        member.messages_count += 1 # increase members messages count
        member.reputation_points += 1 # increase members reputation points
        await member.update()


@dp.message_handler(is_owner = True, chat_id=config.groups.main, commands=["spam"], commands_prefix="!")
async def on_spam(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–ß–µ–≥–æ —Ç—ã –æ—Ç –º–µ–Ω—è —Ö–æ—á–µ—à—å :3")
        return

    ### Retrieve member record from DB
    member = await lru_cache.retrieve_or_create_member(message.reply_to_message.from_user.id)

    # Retrieve tg member object
    tg_member = await lru_cache.retrieve_tgmember(message.bot, message.chat.id, message.reply_to_message.from_user.id)

    # Define message text
    msg_text = None
    if message.reply_to_message.content_type == types.ContentType.TEXT:
        msg_text = message.reply_to_message.text
    elif message.reply_to_message.content_type in [types.ContentType.PHOTO, types.ContentType.DOCUMENT, types.ContentType.VIDEO]:
        msg_text = message.reply_to_message.caption

    # Quit, if no message to check
    if msg_text is None:
        await message.reply("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ - –Ω–µ—Ç —Å–ø–∞–º–∞ :3")
        return

    try:
        log_msg = msg_text
        log_msg += "\n\n<i>–ê–≤—Ç–æ—Ä:</i> " + utils.user_mention(message.reply_to_message.from_user)

        # Create DB record on spam message
        spam_rec = await Spam.objects.create(message=msg_text, is_spam=True, user_id=message.reply_to_message.from_user.id, chat_id=int(config.groups.main)) # assume is spam by default

        # Generate keyboard with some actions for detected spam
        spam_keyboard = types.InlineKeyboardMarkup()

        # is spam + block user
        spam_keyboard.add(types.InlineKeyboardButton(
            text="‚ùå –≠—Ç–æ —Å–ø–∞–º + –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            callback_data=f"spam_ban_{spam_rec.id}_{message.reply_to_message.from_user.id}")
        )

        # not a spam
        spam_keyboard.add(types.InlineKeyboardButton(
            text="‚ùé –≠—Ç–æ –ù–ï —Å–ø–∞–º",
            callback_data=f"spam_invert_{spam_rec.id}_{member.id}")
        )

        # test msg, remove from db
        spam_keyboard.add(types.InlineKeyboardButton(
            text="–£–±—Ä–∞—Ç—å –∏–∑ –ë–î, —ç—Ç–æ —Ç–µ—Å—Ç",
            callback_data=f"spam_test_{spam_rec.id}_{member.id}")
        )

        # send message with a keyboard to log channel
        await message.bot.send_message(
            config.groups.logs,
            utils.generate_log_message(log_msg, "‚ùå –ê–Ω—Ç–∏–°–ü–ê–ú"),
            reply_markup=spam_keyboard)

        # remove marked message from chat afterwards
        if not tg_member.is_chat_admin():
            await message.reply_to_message.delete()

        await message.reply(f"ü´° –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —Å–ø–∞–º.")
    except ValueError:
        await message.reply("O_o –ú–¥–∞")


@dp.message_handler(chat_id=config.groups.main, content_types=["voice"])
async def on_user_voice(message: types.Message):
    if random.random() < 0.75: # 75% chance to react
        ### Retrieve member record from DB
        member = await lru_cache.retrieve_or_create_member(message.from_user)

        await message.reply(random.choice(["—Ñ—É! –§–£ –Ø –°–ö–ê–ó–ê–õ, –ù–ï–õ–¨–ó–Ø. –ë–†–û–°–¨ –ö–ê–ö–£. –ü–ò–®–ò –¢–ï–ö–°–¢–û–ú.", "–î–∞–≤–∞–π –±–µ–∑ —Ä–µ–∑–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π! –ü–æ–ª–æ–∂–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞ –ø–æ–ª ... –∏ –±–æ–ª—å—à–µ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–π –ì–°–∫–∏ :3",
                                           "–ì–°–∫–∏ - –±–∏—á —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞. –î–µ–ª–∞–π –≤—ã–≤–æ–¥—ã, –º–∞–∫–∞—Ä–æ—à–∫–∞ :3", "–ê –≤–æ—Ç –≤ –º–æ—ë –≤—Ä–µ–º—è –ª—é–¥–∏ –ø–∏—Å–∞–ª–∏ —Ç–µ–∫—Å—Ç–æ–º ...",
                                           "–¢–´ –ü–†–ò–®–ï–õ –í –≠–¢–û–¢ –ß–ê–¢! –ù–æ —Ç—ã –ø—Ä–∏—à–µ–ª –±–µ–∑ —É–≤–∞–∂–µ–Ω–∏—è ...", "–°—ç—Ä, –≤—ã–Ω—É–∂–¥–µ–Ω —Å–æ–æ–±—â–∏—Ç—å –≤–∞–º, —á—Ç–æ –æ–±—â–∞—Ç—å—Å—è –ì–°–∫–∞–º–∏ —ç—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.",
                                           "–ì–°–∫–∏ –±–æ–∂ ... –≤—ã–π–¥–∏ —Å —á–∞—Ç–∞, –Ω–µ –ø–æ–∑–æ—Ä—å—Å—è.", "–§—É! –§–£ –Ø –°–ö–ê–ó–ê–õ! –ü–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º."]))

        member.reputation_points -= 10 # every voice message removes some reputation points
        await member.update()


@dp.message_handler(chat_id=config.groups.main, content_types=['contact'])
async def on_user_contact(message: types.Message):
    ### Retrieve member
    # member = await lru_cache.retrieve_or_create_member(message.from_user.id)
    tg_member = await lru_cache.retrieve_tgmember(message.bot, message.chat.id, message.from_user.id)

    # User is not allowed to post contact type messages
    # exceptions: admins
    if not tg_member.is_chat_admin():
        await message.delete()


media_content_types = [
    ContentType.PHOTO,
    ContentType.VIDEO,
    ContentType.AUDIO,
    ContentType.DOCUMENT,
    ContentType.VOICE,
    ContentType.VIDEO_NOTE,
    ContentType.ANIMATION
]
@dp.message_handler(chat_id=config.groups.main, content_types=media_content_types)
async def on_user_media(message: types.Message):
    ### Retrieve member
    member = await lru_cache.retrieve_or_create_member(message.from_user.id)
    tg_member = await lru_cache.retrieve_tgmember(message.bot, message.chat.id, message.from_user.id)

    # User is not allowed to post media type messages, until he reaches required reputation points
    # exceptions: admins
    if not tg_member.is_chat_admin() and member.reputation_points < int(config.spam.allow_media_threshold):
        await message.delete()

@dp.message_handler(is_admin=False, chat_id=config.groups.main, content_types=[types.ContentType.TEXT, types.ContentType.PHOTO, types.ContentType.DOCUMENT, types.ContentType.VIDEO])
async def on_user_message_delete_woman(message: types.Message):
    if not(message.reply_to_message and message.reply_to_message.forward_from_chat and message.reply_to_message.forward_from_chat.id == config.groups.linked_channel):
        return

    ### Retrieve member
    member = await lru_cache.retrieve_or_create_member(message.from_user.id)
    tg_member = await lru_cache.retrieve_tgmember(message.bot, message.chat.id, message.from_user.id)

    # Try detect member gender
    member__gender = lru_cache.detect_gender(tg_member.user.first_name)

    if member__gender == Gender.FEMALE:
        # RECOGNIZED FEMALE
        # Women accounts is not allowed to post messages, until they reach required reputation points
        # exceptions: admins
        if not tg_member.is_chat_admin() and member.reputation_points < int(config.spam.allow_first_comments_threshold__woman):
            await message.delete()
            await utils.write_log(message.bot, f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}\n\n<i>–ê–≤—Ç–æ—Ä:</i> {utils.user_mention(message.from_user)}", "ü§ñ –ê–Ω—Ç–∏–≤—É–º–µ–Ω")
    else:
        # OTHER GENDER (or unknown/ambiguous)
        # remove any messages within 20 seconds after message posted
        # exceptions: admins, users with high enough reputation points
        if not tg_member.is_chat_admin() and member.reputation_points < int(config.spam.allow_first_comments_threshold) and (message.date - message.reply_to_message.forward_date).seconds <= int(config.spam.remove_first_comments_interval):
            try:
                await message.delete()
                await utils.write_log(message.bot, f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}\n\n<i>–ê–≤—Ç–æ—Ä:</i> {utils.user_mention(message.from_user)}", "ü§ñ –ê–Ω—Ç–∏–±–æ—Ç")
            except exceptions.MessageCantBeDeleted:
                pass


@dp.message_handler(chat_id=config.groups.main, commands="–±—É", commands_prefix="!/")
async def on_bu(message: types.Message):
  ### Retrieve member record from DB
  member = await lru_cache.retrieve_or_create_member(message.from_user.id)



  await message.reply(random.choice(["–ë—É–≥–∞–≥–∞!", "–ù–µ –ø—É–≥–∞–π —Ç–∞–∫!", "–ë–æ–∂–µ ..", "–ù–µ –º–µ—à–∞–π –º–Ω–µ –¥–µ–ª–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è :3", "–•–≤–∞—Ç–∏—Ç!",
                                     "–õ–∞–¥–Ω–æ ...", "–ë–ª —è –∞–∂ –≤–∑–¥—Ä–æ–≥–Ω—É–ª ...", "–¢–∞ –∑–∞ —à–æ :3", "–°—Ç—Ä–∞—à–Ω–∞ –≤—ã—Ä—É–±–∞–π",
                                     "–ù–µ —Å–º–µ—à–Ω–æ :3", "–¢–∞–∫ –∏ —Å–µ—Ä–¥–µ—à–Ω—ã–π –ø—Ä–∏—Å—Ç—É–ø –º–æ–∂–Ω–æ —Å–ª–æ–≤–∏—Ç—å!", "–°–∞–º —Ç—ã –±/—É –ø–æ–Ω",
                                     "–Ø —á—É—Ç—å –Ω–µ –∫—Ä–∞—à–Ω—É–ª—Å—è –æ—Ç —Å—Ç—Ä–∞—Ö–∞!", "–¢—ã —á–µ–≤–æ —Ç–≤–æ—Ä–∏—à—å ...", "–ü—É–≥–∞—Ç—å –±–æ—Ç–æ–≤? –í–æ—Ç —ç—Ç–æ —Å–º–µ–ª–æ—Å—Ç—å!",
                                     "–ê–ê–ê–ê–ê–ê! –õ–∞–¥–Ω–æ, —à—É—á—É.", "–¢—ã –º–µ–Ω—è –≤—ã–∫–ª—é—á–∏—Ç—å —Ö–æ—á–µ—à—å??", "–Ø —â–∞—Å –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∑–æ–≤—É!",
                                     "–ù–µ –¥–µ–ª–∞–π —Ç–∞–∫ –±–æ–ª—å—à–µ, –ª–∞–¥–Ω–æ?", "–ü—Ñ—Ñ .. –Ω–∞—à–µ–ª —á–µ–º –ø—É–≥–∞—Ç—å.", "–ü–æ–π–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—â—É—Å—å –æ—Ç —Å—Ç—Ä–∞—Ö–∞.",
                                     "–®—É—Ç–∫–∏ —Ç–∞–∫–∏–µ —Å–µ–±–µ, –µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ...", "–ë–£–∫–≤–∞–ª—å–Ω–æ –∏—Å–ø—É–≥–∞–ª—Å—è :3", "–û–π –≤—Å—ë ...", "–ù—É —Ö–æ—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π, –Ω–µ—á–µ—Å—Ç–Ω–æ –∂–µ!",
                                     "–û–ú–ì üò§", "–°—Ç—Ä–∞—à–Ω–æ, –∞–∂ –ø—Ä–æ—Ü –≤—Å–ø–æ—Ç–µ–ª.", "–ë—É! –ê —Ç–µ–ø–µ—Ä—å —Ç—ã –∏—Å–ø—É–≥–∞–π—Å—è :3", "–õ–∞–¥–Ω–æ, —è –∏—Å–ø—É–≥–∞–ª—Å—è, –Ω–æ —è –∑–∞–ø–∏—Å–∞–ª —ç—Ç–æ –≤ –ª–æ–≥.",
                                     "–ò —á—Ç–æ –¥–∞–ª—å—à–µ?", "–ú–¥–∞ ..", "–¢–∞–º –≥–¥–µ —Ç—ã –ø—É–≥–∞—Ç—å —É—á–∏–ª—Å—è, —è —Ç–∞–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞–ª.", "ü§ñ –ë–∏–ø –±—É–ø, –±—É–ø –±–∏–ø."]))


# @dp.message_handler(chat_id=config.groups.main, commands=["–∫–æ–Ω—Ñ–µ—Ç—ã", "sweets", "—Å–ª–∞–¥–∫–æ–µ", "—Ö—ç–ª–æ—É–∏–Ω", "—Å–ª–∞–¥–æ—Å—Ç–∏"], commands_prefix="!/")
# async def on_sweets(message: types.Message):
#     ### Retrieve member record from DB
#     try:
#         # retrieve existing record
#         member = await Member.objects.get(user_id=message.from_user.id)
#     except ormar.NoMatch:
#         return
#
#     if random.random() < 0.05:  # 5% chance to get golden ticket
#         await message.reply("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤ —Ç–≤–æ–µ–π —à–æ–∫–æ–ª–∞–¥–∫–µ –æ–∫–∞–∑–∞–ª—Å—è <u>–∑–æ–ª–æ—Ç–æ–π –±–∏–ª–µ—Ç</u> üé´")
#         member.halloween_golden_tickets += 1
#         await member.update()
#     else:
#         if random.random() < 0.25: # 25% to get sweets
#             sweets_random = random.randrange(1, 100)
#             await message.reply(f"–ù–∞ —Ç–µ–±–µ üç¨ <i>({sweets_random}—à—Ç.)</i>")
#             member.halloween_sweets += sweets_random
#             await member.update()
#         else:
#             if random.random() < 0.5: # 50% to get anything sweet
#                 await message.reply(random.choice(["–î–µ—Ä–∂–∏ —à–æ–∫–æ–ª–∞–¥–∫—É üç´", "–ü–µ—á–µ–Ω—å–∫—É, —Å—ç—Ä üç™", "–í–æ—Ç–± —Ç–µ–±–µ –ø–∏—Ä–æ–≥ ü•ß", "–í–æ—Ç–± üç≠"]))
#                 member.halloween_sweets += 1
#                 await member.update()
#
#             else:
#                 if random.random() < 0.01: # 1% chance to get a pumpkin
#                     await message.reply("üéÉ –í–æ—Ç–± —Ç–µ–±–µ —Ç—ã–∫–≤–∞!")
#                     member.halloween_sweets += 100 # 1 pumpkin = 100 sweets
#                     await member.update()
#
#                 else:
#                     # no sweets this time :(
#                     await message.reply(
#                         random.choice(["–•–≤–∞—Ç–∏—Ç —Å —Ç–µ–±—è, —Å–ª–∞–¥–∫–æ–µ–∂–∫–∞ :3", "–ì–∞–¥–æ—Å—Ç–∏ —Ç–µ–±–µ, –∞ –Ω–µ —Å–ª–∞–¥–æ—Å—Ç–∏ –ø–æ–Ω :3\n<i>–ø—Ö–ø—Ö–ø–ø</i>",
#                                        "–°–ª–∞–¥–∫–æ–µ –≤—Ä–µ–¥–Ω–æ –¥–ª—è –∑—É–±–æ–≤!", "–•–≤–∞—Ç–∏—Ç –∂—Ä–∞—Ç—å —Å–ª–∞–¥–æ—Å—Ç–∏ –ø–æ–Ω :3",
#                                        "–ë—É–¥–µ—à—å –º–Ω–æ–≥–æ –∫—É—à–∞—Ç–± —Å–ª–∞–¥–æ—Å—Ç–µ–π, –∫–æ–¥ –Ω–µ –±—É–¥–µ—Ç –∫–æ–º–ø–∏–ª–∏—Ç—å—Å—è –ø—Ö–ø—Ö–ø—Ö :3"]))

@dp.message_handler(chat_id=config.groups.main, commands=["me", "—è", "info", "–∏–Ω—Ñ–æ", "lvl", "–ª–≤–ª", "whoami", "neofetch"], commands_prefix="!/")
async def on_me(message: types.Message):
    if message.reply_to_message and not message.reply_to_message.is_automatic_forward:
        user_id = message.reply_to_message.from_user.id
    else:
        user_id = message.from_user.id

    ### Retrieve member
    member = await lru_cache.retrieve_or_create_member(user_id)
    tg_member = await lru_cache.retrieve_tgmember(message.bot, message.chat.id, user_id)

    ### Check member name for profanity and censure, if required
    tg_member__full_name: str = tg_member.user.full_name.strip()
    _del = False
    _word = None
    _del, _word = utils.check_for_profanity_all(tg_member__full_name)

    if _del:
        tg_member__full_name = tg_member__full_name.replace(_word, '#'*len(_word))

    # Try detect member gender
    member__gender = lru_cache.detect_gender(tg_member.user.first_name)

    member_level = None
    if isinstance(tg_member, (ChatMemberAdministrator, ChatMemberOwner)) and tg_member.is_chat_creator():
        # owner
        member_level = "üëë –ö–æ—Ä–æ–ª—å"
        member_rep = "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è –ü—è—Ç—å –∑–≤—ë–∑–¥ —Ä–æ–∑—ã—Å–∫–∞"
        member_avatar = "‚úñÔ∏è"
    elif isinstance(tg_member, (ChatMemberAdministrator, ChatMemberOwner)) and tg_member.can_restrict_members:
        # admin (actual)
        # member_level = random.choice(["üéÉ –ì–ª–∞–≤–Ω–∞—è —Ç—ã–∫–æ–≤–∫–∞ —á–∞—Ç–∞", "üéÉ –ë–µ–∑–≥–æ–ª–æ–≤—ã–π –≤—Å–∞–¥–Ω–∏–∫", "üéÉ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –Ω–æ—á–∏", "üéÉ –¢—ã–∫–≤–µ–Ω–Ω—ã–π –≤–ª–∞—Å—Ç–µ–ª–∏–Ω"])
        member_level = random.choice(["–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π", "S.W.A.T.", "–ê–≥–µ–Ω—Ç –§–ë–†", "–ú—Å—Ç–∏—Ç–µ–ª—å", "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–î–ª–∞–Ω—å –ø—Ä–∞–≤–æ—Å—É–¥–∏—è"])
        member_rep = "üõ° "
        member_avatar = random.choice(['üëÆ','üëÆ‚Äç‚ôÇÔ∏è','üëÆ‚Äç‚ôÄÔ∏è','üöî','‚öñÔ∏è','ü§ñ','üòº','‚öîÔ∏è'])
    else:
        member_rep = ""

        if member.messages_count < 100:
            member_level = "ü•∑ –ù–æ—É–Ω–µ–π–º"
        elif 100 <= member.messages_count < 500:
            member_level = "üåö –ù–æ–≤–∏—á–æ–∫"
        elif 500 <= member.messages_count < 1000:
            member_level = "üòé –û–ø—ã—Ç–Ω—ã–π"
        elif 1000 <= member.messages_count < 2000:
            member_level = "ü§µ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª"
        elif 2000 <= member.messages_count < 3000:
            member_level = "üòà –í–µ—Ç–µ—Ä–∞–Ω"
        elif 3000 <= member.messages_count < 5000:
            member_level = "‚≠êÔ∏è –ú–∞—Å—Ç–µ—Ä"
        else:
            member_level = "üåü –õ–µ–≥–µ–Ω–¥–∞"

        if member__gender == Gender.FEMALE:
            member_avatar = random.choice(['üë©‚Äçü¶∞', 'üë©', 'üë±‚Äç‚ôÄÔ∏è', 'üëß', 'üë©‚Äçü¶±', 'üë©‚Äçü¶±', 'ü§µ‚Äç‚ôÄÔ∏è', 'üë©‚Äçü¶≥'])
        elif member__gender == Gender.MALE:
            member_avatar = random.choice(['üë®‚Äçü¶≥', 'üßî', 'üßë', 'üë®', 'üßî‚Äç‚ôÇÔ∏è', 'üßë‚Äçü¶∞', 'üßë‚Äçü¶±', 'üë®‚Äçü¶∞', 'üë¶', 'ü§µ‚Äç‚ôÇÔ∏è'])
        else:
            member_avatar = random.choice(['ü§ñ', 'üòº', 'üëª', 'üò∫'])

        # if member.messages_count < 100:
        #     member_level = random.choice(["üßõ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞–º–ø–∏—Ä", "üéÉ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç—ã–∫–≤–∞", "üê∫ –ë–µ–∑—ã–º—è–Ω–Ω—ã–π –æ–±–æ—Ä–æ—Ç–µ–Ω—å"])
        # elif 100 <= member.messages_count < 500:
        #     member_level = "üåö –í–æ—Å—Ö–æ–¥—è—â–∞—è –ª—É–Ω–∞"
        # elif 500 <= member.messages_count < 1000:
        #     member_level = "üéÉ –¢—ã–∫–æ–≤–∫–∞"
        # elif 1000 <= member.messages_count < 2000:
        #     member_level = "üëª –í–µ—Ç–µ—Ä–∞–Ω –∏—Å–∫—É—Å—Å—Ç–≤–∞ –∑–∞–ø—É–≥–∏–≤–∞–Ω–∏—è"
        # else:
        #     member_level = "‚≠êÔ∏èüéÉ –¢—ã–∫–≤–µ–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä"

        # if member.reputation_points < -2000:
        #     member_rep = "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è –ü—è—Ç—å –∑–≤—ë–∑–¥ —Ä–æ–∑—ã—Å–∫–∞"
        # elif -2000 <= member.reputation_points < -1000:
        #     member_rep = "‚ò†Ô∏è –û—Å–æ–±–æ –æ–ø–∞—Å–Ω—ã–π"
        # elif -1000 <= member.reputation_points < -500:
        #     member_rep = "üíÄ –¢—ë–º–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å"
        # elif -500 <= member.reputation_points < 0:
        #     member_rep = "üëø –ü–ª–æ—Ö–∞—è –ø–µ—á–µ–Ω—å–∫–∞"
        # elif 0 <= member.reputation_points < 100:
        #     member_rep = "üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
        # elif 100 <= member.reputation_points < 500:
        #     member_rep = "üôÇ –•–æ—Ä–æ—à–∞—è –ø–µ—á–µ–Ω—å–∫–∞"
        # elif 500 <= member.reputation_points < 1000:
        #     member_rep = "üòé –ó–≤–µ–∑–¥–∞ —á–∞—Ç–∞"
        # else:
        #     member_rep = "üòá –î–æ–±—Ä–µ–π—à–∏–π –¥–æ–±—Ä—è–∫"

    member_rep_label = ""
    if not tg_member.is_chat_creator():
        if member.reputation_points < -2000:
            member_rep_label = "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è –ø—è—Ç—å –∑–≤—ë–∑–¥ —Ä–æ–∑—ã—Å–∫–∞"
        elif -2000 <= member.reputation_points < -1000:
            member_rep_label = "–æ—Å–æ–±–æ –æ–ø–∞—Å–Ω—ã–π"
        elif -1000 <= member.reputation_points < -500:
            member_rep_label = "—Ç—ë–º–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å"
        elif -500 <= member.reputation_points < 0:
            member_rep_label = "–Ω–∞—Ä—É—à–∏—Ç–µ–ª—å"
        elif 0 <= member.reputation_points < 100:
            member_rep_label = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
        elif 100 <= member.reputation_points < 500:
            member_rep_label = "—Ö–æ—Ä–æ—à–∏–π"
        elif 500 <= member.reputation_points < 1000:
            member_rep_label = "–æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–π"
        else:
            member_rep_label = "–≤–µ–ª–∏–∫–æ–¥—É—à–Ω—ã–π"

    answer = f"{member_avatar} <b>{tg_member__full_name}</b>"
    # answer += f"\n\n<b>–†–µ–ø—É—Ç–∞—Ü–∏—è: </b>{member_level} <i>(<tg-spoiler>{member.messages_count}</tg-spoiler>)</i>"
    # answer += f"\n<b>–†–µ–ø—É—Ç–∞—Ü–∏—è: </b>{member_level} <i> ‚Ä¢ „Äé{member_rep} (<tg-spoiler>{member.reputation_points}</tg-spoiler>)„Äè</i>"
    answer += f"\n<b>–†–µ–ø—É—Ç–∞—Ü–∏—è: </b>{member_level} <i> „Äé{member_rep}{member_rep_label} (<tg-spoiler>{member.reputation_points}</tg-spoiler>)„Äè</i>"

    await message.reply(answer)


@dp.message_handler(is_owner = True, chat_id=config.groups.main, commands=["setlvl"], commands_prefix="!")
async def on_setlvl(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–ß–µ–≥–æ —Ç—ã –æ—Ç –º–µ–Ω—è —Ö–æ—á–µ—à—å :3")
        return

    ### Retrieve member record from DB
    member = await lru_cache.retrieve_or_create_member(message.reply_to_message.from_user.id)

    try:
        if member.messages_count > 100000:
            await message.reply("–ß—Ç–æ –∫—É—Ä–∏—à—å, –¥—Ä—É–≥–∞–ª—ë–∫? :3")
        else:
            member.messages_count = abs(int(utils.remove_prefix(message.text, "!setlvl")))
            member.reputation_points += abs(int(utils.remove_prefix(message.text, "!setlvl")))

            await member.update()
            await message.reply("–õ–∞–¥–Ω–æ :3")
    except ValueError:
        await message.reply("O_o –ú–¥–∞")


@dp.message_handler(is_owner = True, chat_id=config.groups.main, commands=["reward"], commands_prefix="!")
async def on_reward(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–ß–µ–≥–æ —Ç—ã –æ—Ç –º–µ–Ω—è —Ö–æ—á–µ—à—å :3")
        return

    points = abs(int(utils.remove_prefix(message.text, "!reward")))

    ### Retrieve member record from DB
    member = await lru_cache.retrieve_or_create_member(message.reply_to_message.from_user.id)

    try:
        if points > 100_000:
            await message.reply("–ù–µ—Ç–± :3")
        else:
            member.reputation_points += points

            await member.update()
            # await message.reply(f"üéÉ <b>–°–ª—É—à–∞—é—Å—å, –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å!</b>\n–£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ –±–ª–∞–≥–æ—Å–ª–æ–≤–ª—ë–Ω –≤–∞—à–µ–π –º–∏–ª–æ—Å—Ç—å—é, –µ–º—É –Ω–∞—á–∏—Å–ª–µ–Ω–æ <i><b>{points} –æ—á–∫–æ–≤ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏.</b></i>")
            await message.reply(f"‚ûï –£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ –ø–æ–ª—É—á–∞–µ—Ç <i><b>{points}</b> –æ—á–∫–æ–≤ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏.</i>")
    except ValueError:
        await message.reply("O_o –ú–¥–∞")


@dp.message_handler(is_owner = True, chat_id=config.groups.main, commands=["rreset"], commands_prefix="!")
async def on_rep_reset(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–ß–µ–≥–æ —Ç—ã –æ—Ç –º–µ–Ω—è —Ö–æ—á–µ—à—å :3")
        return

    ### Retrieve member record from DB
    member = await lru_cache.retrieve_or_create_member(message.reply_to_message.from_user.id)

    try:
        member.reputation_points = member.messages_count

        await member.update()
        await message.reply(f"‚òØ –£—Ä–æ–≤–µ–Ω—å —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ <i><b>—Å–±—Ä–æ—à–µ–Ω</b>.</i>")
    except ValueError:
        await message.reply("O_o –ú–¥–∞")


@dp.message_handler(is_owner = True, chat_id=config.groups.main, commands=["punish"], commands_prefix="!")
async def on_punish(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–ß–µ–≥–æ —Ç—ã –æ—Ç –º–µ–Ω—è —Ö–æ—á–µ—à—å :3")
        return

    points = abs(int(utils.remove_prefix(message.text, "!punish")))

    ### Retrieve member record from DB
    member = await lru_cache.retrieve_or_create_member(message.reply_to_message.from_user.id)

    try:
        if points > 100_000:
            await message.reply("–ù–µ—Ç–± :3")
        else:
            member.reputation_points -= points

            await member.update()
            await message.reply(f"‚ûñ –£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ —Ç–µ—Ä—è–µ—Ç <i><b>{points}</b> –æ—á–∫–æ–≤ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏.</i>")
    except ValueError:
        await message.reply("O_o –ú–¥–∞")

'''async def on_user_message(message: types.Message):
  """
  Removes messages, if they contain black listed words.

  :param message: Message in group
  """
  _del = False
  _word = None

  for w in blacklist:
    if w in message.text:
      _del = True
      _word = w
      break

  _result = blacklist_regexp.search(message.text)

  if _result:
    _word = _result.group(0)
    _del = True

  if _del:
    await message.delete()

    log_msg = message.text
    if _word:
      log_msg = log_msg.replace(_word, '<u><b>'+_word+'</b></u>')
    log_msg += "\n\n<i>–ê–≤—Ç–æ—Ä:</i> "+message.from_user.full_name+" ("+message.from_user.mention+")"

    await utils.write_log(message.bot, log_msg, "–ê–Ω—Ç–∏–º–∞—Ç")'''

'''@dp.message_handler(chat_id=config.groups.main)
async def do_ro_filter_messages(message: types.Message):
  user = await message.bot.get_chat_member(config.groups.main, message.from_user.id)

  # @TODO: small optimization can be done, by muting not muted members for a minute (or so)
  # but in this case there may be problems with restrictions (after restriction period ended, telegram returns
  # back the default chat restrictions, but not users previous restrictions)
  if builtins.RO and not user.is_chat_admin():
    await message.bot.delete_message(config.groups.main, message.message_id)'''
